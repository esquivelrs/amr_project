<!-- Launches oculus_publisher, oculus_subscriber, and dynamic reconfigure gui
     with default sonar parameters (as defined in SimpleFireMessage.cpp)

  By default, this launch file **doesn't** launch a sonar_image_proc/draw_sonar
  node.  Set draw_sonar:=true to have it run.

  If postprocess_sonar:=true, a sonar_postprocessor node will also be
  started

  Various sonar params can also be started with launchfile args.
  Other than ip_address, these parameters are also available through
  dynamic_reconfigure
-->
<launch>
  <arg name="range" default="2"/>
  <arg name="gain_percent" default="100"/>
  <arg name="gamma" default="127"/>
  <arg name="ping_rate" default="0"/>
  <arg name="freq_mode" default="2"/>
  <arg name="ip_address" default="auto"/>
  <arg name="send_gain" default="true"/>
  <arg name="data_size" default="8bit"/>
  <arg name="frame_id" default="oculus"/>

  <!-- If true, also launches a sonar_draw node -->
  <arg name="draw_sonar" default="false"/>
  <arg name="postprocess_sonar" default="false"/>

  <arg name="root" default="oculus" />
  <arg name="manager" default="/$(arg root)/nodelet_manager" />

  <!--  launch-prefix="gdb -ex run args" -->
  <group ns="$(arg root)">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager"  args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="oculus_sonar_driver"
          args="load oculus_sonar/driver $(arg manager)"
          output="screen">
      <!-- required parameters -->
      <param name="frame_id" value="$(arg frame_id)"/>
      <param name="ip_address" value="$(arg ip_address)"/>
      <!-- also settable via dynamic reconfigure -->
      <param name="range" value="$(arg range)"/>
      <param name="ping_rate" value="$(arg ping_rate)"/>
      <param name="gamma" value="$(arg gamma)"/>
      <param name="gain" value="$(arg gain_percent)"/>
      <param name="freq_mode" value="$(arg freq_mode)"/>
      <param name="data_size" value="$(arg data_size)"/>
      <param name="send_gain" value="$(arg send_gain)"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="draw_sonar"
          args="load sonar_image_proc/draw_sonar $(arg manager)"
          output="screen"
          if="$(arg draw_sonar)">
        <remap from="sonar_image" to="/$(arg root)/sonar_image"/>
    </node>

    <group ns="postprocess" if="$(arg postprocess_sonar)">
      <node pkg="nodelet" type="nodelet" name="sonar_postprocessor"
            args="load sonar_image_proc/sonar_postprocessor $(arg manager)"
            output="screen">
        <!-- Use /oculus/sonar_image as input -->
        <remap from="sonar_image" to="/$(arg root)/sonar_image"/>

        <!-- Map the output to /postprocess/sonar_image -->
        <remap from="sonar_image_postproc" to="/$(arg root)/postprocess/sonar_image"/>
      </node>

      <node pkg="nodelet" type="nodelet" name="draw_sonar"
            args="load sonar_image_proc/draw_sonar $(arg manager)"
            output="screen"
            if="$(arg draw_sonar)">
          <remap from="sonar_image" to="/$(arg root)/postprocess/sonar_image"/>
      </node>
    </group>

  </group>

</launch>
